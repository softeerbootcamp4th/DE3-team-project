AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description:
  Load stack for DE3 team project

Parameters:
  VPCName:
    Description: The VPC name will be prefixed to VPC resources
    Type: String
    Default: EMVPC

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  RedshiftPublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.7.0/24

  RedshiftPublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.8.0/24

  RedshiftPublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.9.0/24

  LocalIp:
    Type: String
    Description: Your local IP address in CIDR notation.
    Default: 183.101.248.104/32

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VPCName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCName} Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref SecurityGroup

  RedshiftSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
      CidrIp: !Ref LocalIp

  RedshiftSecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      CidrIp: '18.176.203.96/28'

  SecurityGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  RedshiftPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet1CIDR
      MapPublicIpOnLaunch: true

  RedshiftPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet2CIDR
      MapPublicIpOnLaunch: true

  RedshiftPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet3CIDR
      MapPublicIpOnLaunch: true

  RedshiftPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet1

  RedshiftPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet2

  RedshiftPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet3

  RedshiftDefaultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - 'redshift.amazonaws.com'
                - 'redshift-serverless.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonRedshiftFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess


  RedshiftServerlessNamespace:
    Type: AWS::RedshiftServerless::Namespace
    Properties:
      NamespaceName: de3-namespace
      DbName: dev
      AdminUsername: '{{resolve:secretsmanager:hmg-4th-de3-redshift-admin-credential:SecretString:redshift_user}}'
      AdminUserPassword: '{{resolve:secretsmanager:hmg-4th-de3-redshift-admin-credential:SecretString:redshift_password}}'
      DefaultIamRoleArn: !GetAtt RedshiftDefaultRole.Arn
      IamRoles:
        - !GetAtt RedshiftDefaultRole.Arn

  RedshiftServerlessWorkgroup:
    Type: AWS::RedshiftServerless::Workgroup
    Properties:
      WorkgroupName: de3-workgroup
      NamespaceName: !Ref RedshiftServerlessNamespace
      BaseCapacity: 32
      PubliclyAccessible: true
      EnhancedVpcRouting: true
      SubnetIds:
        - !Ref RedshiftPublicSubnet1
        - !Ref RedshiftPublicSubnet2
        - !Ref RedshiftPublicSubnet3
      SecurityGroupIds:
        - !Ref SecurityGroup

Outputs:
  VPCId:
    Value: !Ref VPC
    Export:
      Name: VPCId

  SecurityGroupId:
    Value: !Ref SecurityGroup
    Export:
      Name: SecurityGroupId

  RedshiftPublicSubnet1Id:
    Value: !Ref RedshiftPublicSubnet1
    Export:
      Name: RedshiftPublicSubnet1Id

  RedshiftPublicSubnet2d:
    Value: !Ref RedshiftPublicSubnet2
    Export:
      Name: RedshiftPublicSubnet2Id

  RedshiftPublicSubnet3Id:
    Value: !Ref RedshiftPublicSubnet3
    Export:
      Name: RedshiftPublicSubnet3Id
