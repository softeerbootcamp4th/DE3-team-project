AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description:
  Load stack for DE3 team project

Parameters:
  VPCName:
    Description: The VPC name will be prefixed to VPC resources
    Type: String
    Default: EMVPC

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the public subnet
    Type: String
    Default: 10.192.10.0/24

  RedshiftPublicSubnet1CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.7.0/24

  RedshiftPublicSubnet2CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.8.0/24

  RedshiftPublicSubnet3CIDR:
    Description: IP range (CIDR notation) for the RedshiftPublicSubnet
    Type: String
    Default: 10.192.9.0/24

  LocalIp:
    Type: String
    Description: Your local IP address in CIDR notation.
    Default: 175.196.82.2/32

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VPCName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${VPCName} Public Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${VPCName} Public Route Table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  SecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref SecurityGroup

  SecurityGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  RedshiftPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
  RedshiftPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet2CIDR
      MapPublicIpOnLaunch: true
  RedshiftPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      CidrBlock: !Ref RedshiftPublicSubnet3CIDR
      MapPublicIpOnLaunch: true
  RedshiftPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet1
  RedshiftPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet2
  RedshiftPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref RedshiftPublicSubnet3
  RedshiftSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 5439
      ToPort: 5439
      CidrIp: !Ref LocalIp

  RedshiftServerlessNamespace:
    Type: AWS::RedshiftServerless::Namespace
    Properties:
      NamespaceName: de3-namespace
      DbName: dev
      AdminUsername: hmgtest
      AdminUserPassword: HMGtest1234
  RedshiftServerlessWorkgroup:
    Type: AWS::RedshiftServerless::Workgroup
    Properties:
      WorkgroupName: de3-workgroup
      NamespaceName: !Ref RedshiftServerlessNamespace
      BaseCapacity: 32
      PubliclyAccessible: true
      SubnetIds:
        - !Ref RedshiftPublicSubnet1
        - !Ref RedshiftPublicSubnet2
        - !Ref RedshiftPublicSubnet3
      SecurityGroupIds:
        - !Ref SecurityGroup
#Outputs:
#  Ec2SubnetId:
#    Description: Private subnet ID for EMR
#    Value: !Ref PublicSubnet1
#
#  SecurityGroupId:
#    Value: !Ref SecurityGroup
#    Export:
#      Name: SecurityGroupId
#
#  VPCId:
#    Value: !Ref VPC
#    Export:
#      Name: VPCId
#
#  PublicRouteTableId:
#    Value: !Ref PublicRouteTable
#    Export:
#      Name: PublicRouteTableId